<?php

namespace App\Controller\Admin;

use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateField;
use EasyCorp\Bundle\EasyAdminBundle\Field\EmailField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TelephoneField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class UserCrudController extends AbstractCrudController
{
    private UserPasswordHasherInterface $passwordHasher;

    public function __construct(UserPasswordHasherInterface $passwordHasher)
    {
        $this->passwordHasher = $passwordHasher;
    }

    public static function getEntityFqcn(): string
    {
        return User::class;
    }

    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $request = $this->getContext()->getRequest();

        $userPassword = $request->get('User')['password'];

        if (null !== $userPassword && '' !== $userPassword) {
            $hashedPassword = $this->passwordHasher->hashPassword($entityInstance, $userPassword);
            $entityInstance->setPassword($hashedPassword);
        }

        parent::updateEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }


    public function configureFields(string $pageName): iterable
    {
        return [
            TextField::new('nomPers', 'Nom de famille'),
            TextField::new('pnomPers', 'Prénom'),
            DateField::new('dateNais', 'Date de naissance'),
            TextEditorField::new('descPers', 'Biographie (Page Auteur)')->hideOnIndex(),
            TextField::new('username', 'Pseudonyme'),
            TextField::new('password')->onlyWhenCreating()
                ->setFormType(PasswordType::class)
                ->setFormTypeOptions([
                    'required' => 'false',
                    'empty_data' => '',
                    'attr' => [
                        'autocomplete' => 'new-password',
                    ],
                ]),
            EmailField::new('emailPers', 'Adresse mail'),
            TelephoneField::new('telPers', 'N° Téléphone')->hideOnIndex(),
            TextField::new('adrPers', 'Adresse')->hideOnIndex(),
            TextField::new('villePers', 'Ville ')->hideOnIndex(),
            IntegerField::new('cpPers', 'Code Postal')->hideOnIndex(),
            AssociationField::new('recettes', 'Nombre de recette(s) crée(s)')
                ->setFormTypeOptions([
                    'choice_label' => 'nomRecette',
                    'required' => false,
                    'query_builder' => function (EntityRepository $entityRepository) {
                        return $entityRepository->createQueryBuilder('recettes')
                            ->orderBy('recettes.nomRecette', 'ASC');
                    },
                ])
                ->onlyWhenUpdating()
                ->hideOnDetail(),

            AssociationField::new('recettes', 'Liste de(s) recette(s) crée(s)')
                ->setFormTypeOptions([
                    'choice_label' => 'nomRecette',
                    'required' => false,
                    'query_builder' => function (EntityRepository $entityRepository) {
                        return $entityRepository->createQueryBuilder('recettes')
                            ->orderBy('recettes.nomRecette', 'ASC');
                    },
                ])
                ->onlyWhenUpdating()
                ->hideOnIndex(),

        ];
    }
}
